#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi2axi_64bit
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi2axi_64bit

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE


## Bus Interfaces
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXI_PROTOCOL = AXI4, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = M_AXI
PARAMETER C_S_AXI_PROTOCOL = AXI4, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI
PARAMETER C_M_TARGET_SLAVE_BASE_ADDR = 0x00000000
PARAMETER C_M_AXI_BURST_LEN = 0x00000100, BUS = M_AXI
PARAMETER C_M_AXI_ID_WIDTH = 0x00000001, BUS = M_AXI
PARAMETER C_M_AXI_ADDR_WIDTH = 0x00000020, BUS = M_AXI
PARAMETER C_M_AXI_DATA_WIDTH = 0x00000040, BUS = M_AXI
PARAMETER C_M_AXI_AWUSER_WIDTH = 0x00000001, BUS = M_AXI
PARAMETER C_M_AXI_ARUSER_WIDTH = 0x00000001, BUS = M_AXI
PARAMETER C_M_AXI_WUSER_WIDTH = 0x00000001, BUS = M_AXI
PARAMETER C_M_AXI_RUSER_WIDTH = 0x00000001, BUS = M_AXI
PARAMETER C_M_AXI_BUSER_WIDTH = 0x00000001, BUS = M_AXI
PARAMETER C_S_AXI_BURST_LEN = 0x00000100, BUS = S_AXI
PARAMETER C_S_AXI_ID_WIDTH = 0x00000001, BUS = S_AXI
PARAMETER C_S_AXI_ADDR_WIDTH = 0x00000020, BUS = S_AXI
PARAMETER C_S_AXI_DATA_WIDTH = 0x00000040, BUS = S_AXI
PARAMETER C_S_AXI_AWUSER_WIDTH = 0x00000001, BUS = S_AXI
PARAMETER C_S_AXI_ARUSER_WIDTH = 0x00000001, BUS = S_AXI
PARAMETER C_S_AXI_WUSER_WIDTH = 0x00000001, BUS = S_AXI
PARAMETER C_S_AXI_RUSER_WIDTH = 0x00000001, BUS = S_AXI
PARAMETER C_S_AXI_BUSER_WIDTH = 0x00000001, BUS = S_AXI

## Ports
PORT M_AXI_ACLK = ACLK, DIR = I, BUS = S_AXI, SIGIS = CLK, BUS = M_AXI
PORT M_AXI_ARESETN = ARESETN, DIR = I, BUS = S_AXI, SIGIS = RST, BUS = M_AXI
PORT M_AXI_AWID = AWID, DIR = O, VEC = [(C_M_AXI_ID_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_AWADDR = AWADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_AWLEN = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI
PORT M_AXI_AWSIZE = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI
PORT M_AXI_AWBURST = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI
PORT M_AXI_AWLOCK = AWLOCK, DIR = O, BUS = M_AXI
PORT M_AXI_AWCACHE = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI
PORT M_AXI_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT M_AXI_AWQOS = AWQOS, DIR = O, VEC = [3:0], BUS = M_AXI
PORT M_AXI_AWUSER = AWUSER, DIR = O, VEC = [(C_M_AXI_AWUSER_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_AWVALID = AWVALID, DIR = O, BUS = M_AXI
PORT M_AXI_AWREADY = AWREADY, DIR = I, BUS = M_AXI
PORT M_AXI_WDATA = WDATA, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_WSTRB = WSTRB, DIR = O, VEC = [((C_M_AXI_DATA_WIDTH/8)-1):0], BUS = M_AXI
PORT M_AXI_WLAST = WLAST, DIR = O, BUS = M_AXI
PORT M_AXI_WUSER = WUSER, DIR = O, VEC = [(C_M_AXI_WUSER_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_WVALID = WVALID, DIR = O, BUS = M_AXI
PORT M_AXI_WREADY = WREADY, DIR = I, BUS = M_AXI
PORT M_AXI_BID = BID, DIR = I, VEC = [(C_M_AXI_ID_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI
PORT M_AXI_BUSER = BUSER, DIR = I, VEC = [(C_M_AXI_BUSER_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_BVALID = BVALID, DIR = I, BUS = M_AXI
PORT M_AXI_BREADY = BREADY, DIR = O, BUS = M_AXI
PORT M_AXI_ARID = ARID, DIR = O, VEC = [(C_M_AXI_ID_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_ARADDR = ARADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_ARLEN = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI
PORT M_AXI_ARSIZE = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI
PORT M_AXI_ARBURST = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI
PORT M_AXI_ARLOCK = ARLOCK, DIR = O, BUS = M_AXI
PORT M_AXI_ARCACHE = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI
PORT M_AXI_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT M_AXI_ARQOS = ARQOS, DIR = O, VEC = [3:0], BUS = M_AXI
PORT M_AXI_ARUSER = ARUSER, DIR = O, VEC = [(C_M_AXI_ARUSER_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_ARVALID = ARVALID, DIR = O, BUS = M_AXI
PORT M_AXI_ARREADY = ARREADY, DIR = I, BUS = M_AXI
PORT M_AXI_RID = RID, DIR = I, VEC = [(C_M_AXI_ID_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_RDATA = RDATA, DIR = I, VEC = [(C_M_AXI_DATA_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI
PORT M_AXI_RLAST = RLAST, DIR = I, BUS = M_AXI
PORT M_AXI_RUSER = RUSER, DIR = I, VEC = [(C_M_AXI_RUSER_WIDTH-1):0], BUS = M_AXI
PORT M_AXI_RVALID = RVALID, DIR = I, BUS = M_AXI
PORT M_AXI_RREADY = RREADY, DIR = O, BUS = M_AXI
PORT S_AXI_ACLK = ACLK, DIR = I, BUS = S_AXI, SIGIS = CLK
PORT S_AXI_ARESETN = ARESETN, DIR = I, BUS = S_AXI, SIGIS = RST
PORT S_AXI_AWID = AWID, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_AWLEN = AWLEN, DIR = I, VEC = [7:0], BUS = S_AXI
PORT S_AXI_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI
PORT S_AXI_AWLOCK = AWLOCK, DIR = I, BUS = S_AXI
PORT S_AXI_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI
PORT S_AXI_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI
PORT S_AXI_AWUSER = AWUSER, DIR = I, VEC = [(C_S_AXI_AWUSER_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], BUS = S_AXI
PORT S_AXI_WLAST = WLAST, DIR = I, BUS = S_AXI
PORT S_AXI_WUSER = WUSER, DIR = I, VEC = [(C_S_AXI_WUSER_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BID = BID, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BUSER = BUSER, DIR = O, VEC = [(C_S_AXI_BUSER_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARID = ARID, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_ARLEN = ARLEN, DIR = I, VEC = [7:0], BUS = S_AXI
PORT S_AXI_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI
PORT S_AXI_ARLOCK = ARLOCK, DIR = I, BUS = S_AXI
PORT S_AXI_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI
PORT S_AXI_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI
PORT S_AXI_ARUSER = ARUSER, DIR = I, VEC = [(C_S_AXI_ARUSER_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RID = RID, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RLAST = RLAST, DIR = O, BUS = S_AXI
PORT S_AXI_RUSER = RUSER, DIR = O, VEC = [(C_S_AXI_RUSER_WIDTH-1):0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI

END
